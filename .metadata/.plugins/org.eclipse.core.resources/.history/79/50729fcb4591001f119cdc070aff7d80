package kr.ac.kku.cs.wp.nangkongmu.user.entity;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import kr.ac.kku.cs.wp.nangkongmu.user.entity.User;
import kr.ac.kku.cs.wp.nangkongmu.user.entity.Role;
import kr.ac.kku.cs.wp.nangkongmu.user.entity.UserRole;
import kr.ac.kku.cs.wp.nangkongmu.user.entity.UserRoleId;
import kr.ac.kku.cs.wp.nangkongmu.util.ConnectionPoolUtil;

public class UserDAOJdbcImpl implements UserDAO {

    private static final Logger logger = LogManager.getLogger(UserDAOJdbcImpl.class);

    // SQL 쿼리문 필드
    private final String querySelectById = "select * from user where id = ?";
    private final String querySelectUserRole = "select * from user_role where user_id = ?";
    private final String querySelectList = "select * from user";
    private final String queryCompareCredentials = "select * from user where id = ? and password = ?";

    // UserDAO 인터페이스의 메서드 구현
    @Override
    public User getUserById(String userId) {
        User user = new User();
        try (Connection conn = ConnectionPoolUtil.getConnection()) {
            PreparedStatement psmt = conn.prepareStatement(querySelectById);
            PreparedStatement sPstmt = conn.prepareStatement(querySelectUserRole);
            psmt.setString(1, userId);
            ResultSet rs = psmt.executeQuery();

            while (rs.next()) {
                user.setId(rs.getString(1));
                user.setName(rs.getString(2));
                user.setEmail(rs.getString(3));
                user.setPassword(rs.getString(4));
                user.setStatus(rs.getString(5));
                sPstmt.setString(1, user.getId());
                ResultSet rsur = sPstmt.executeQuery();
                List<UserRole> urList = new ArrayList<>();
                while (rsur.next()) {
                    Role role = new Role();
                    role.setId(rsur.getString(2));
                    role.setRole(rsur.getString(3));
                    UserRoleId uri = new UserRoleId();
                    uri.setRoleId(role.getId());
                    uri.setUserId(user.getId());
                    UserRole ur = new UserRole();
                    ur.setUser(user);
                    ur.setRole(role);
                    ur.setId(uri);
                    urList.add(ur);
                }
                rsur.close();
                user.setUserRoles(urList);
            }

            rs.close();
            psmt.close();
            sPstmt.close();
        } catch (SQLException e) {
            logger.error("Error fetching user by ID: " + userId, e);
        }

        return user;
    }

    @Override
    public User getUser(User user) {
        logger.info("Fetching user: " + user);
        // 실제 데이터베이스 호출은 생략
        return null; // 구현된 객체 반환
    }

    @Override
    public User updateUser(User user) {
        logger.info("Updating user: " + user);
        // 실제 데이터베이스 호출은 생략
        return null; // 구현된 객체 반환
    }

    @Override
    public void deleteUser(User user) {
        logger.info("Deleting user: " + user);
        // 실제 데이터베이스 호출은 생략
    }

    @Override
    public User createUser(User user) {
        logger.info("Creating user: " + user);
        // 실제 데이터베이스 호출은 생략
        return null; // 구현된 객체 반환
    }

    @Override
    public List<User> getUsers(User user) {
        logger.info("Fetching users similar to: " + user);
        // 실제 데이터베이스 호출은 생략
        return null; // 구현된 객체 목록 반환
    }

    @Override
    public boolean compareUserCredentials(String userId, String password) {
        boolean isValid = false;
        try (Connection conn = ConnectionPoolUtil.getConnection()) {
            PreparedStatement psmt = conn.prepareStatement(queryCompareCredentials);
            psmt.setString(1, userId);
            psmt.setString(2, password);
            ResultSet rs = psmt.executeQuery();
            if (rs.next()) {
                isValid = true;
            }
            rs.close();
            psmt.close();
        } catch (SQLException e) {
            logger.error("Error comparing user credentials for user ID: " + userId, e);
        }
        return isValid;
    }
}
